// <auto-generated />
using System;
using EntityFramework.Infra.Data3;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFramework.Data3.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20200409203236_AdicionandoOutrasTabelasRelacionamentos")]
    partial class AdicionandoOutrasTabelasRelacionamentos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EntityFramework.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DatePublish");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.EducationalInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("GradYear");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EducationalInstitutions");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Friend", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("UserFriendId");

                    b.HasKey("UserId", "UserFriendId");

                    b.HasIndex("UserFriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UrlPhoto")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Identification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Number");

                    b.Property<int>("TypeDoc");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Identification");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.LookingFor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("LookingFor");

                    b.HasData(
                        new { Id = 1, Description = "NotSpecified" },
                        new { Id = 2, Description = "Dating" },
                        new { Id = 3, Description = "Friefriendship" },
                        new { Id = 4, Description = "SeriousRelationship" }
                    );
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DatePublish");

                    b.Property<int>("GroupId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("UrlContent");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.RelationshipStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("RelationshipStatus");

                    b.HasData(
                        new { Id = 1, Description = "NotSpecified" },
                        new { Id = 2, Description = "Single" },
                        new { Id = 3, Description = "Married" },
                        new { Id = 4, Description = "InSeriousRelationship" }
                    );
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("LookingForId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("RelationshipStatusId");

                    b.Property<int>("Sex");

                    b.Property<string>("UrlPhoto")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("LookingForId");

                    b.HasIndex("RelationshipStatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.UserGroup", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GroupId");

                    b.Property<DateTime>("DateCreation");

                    b.Property<bool>("IsAdmin");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.WorkPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CurrentCompany");

                    b.Property<DateTime>("DateAdmission");

                    b.Property<DateTime?>("DateOut");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Comment", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.EducationalInstitution", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.User", "User")
                        .WithMany("EducationalInstitutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Friend", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.User", "UserFriend")
                        .WithMany()
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFramework.Domain.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Identification", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.User", "User")
                        .WithOne("Identification")
                        .HasForeignKey("EntityFramework.Domain.Entities.Identification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.Post", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFramework.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.User", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.LookingFor", "LookingFor")
                        .WithMany()
                        .HasForeignKey("LookingForId");

                    b.HasOne("EntityFramework.Domain.Entities.RelationshipStatus", "RelationshipStatus")
                        .WithMany()
                        .HasForeignKey("RelationshipStatusId");
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFramework.Domain.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFramework.Domain.Entities.WorkPlace", b =>
                {
                    b.HasOne("EntityFramework.Domain.Entities.User", "User")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
